[["index.html", "1 Introduction to Marine Genomics 1.1 Cloud computing versus individual laptops 1.2 Meet our instructors! 1.3 Schedule", " 1 Introduction to Marine Genomics Welcome to Marine Genomics 2022! This is a course on learning how to analyze genomic data for undergraduate students. We will focus on marine organisms but these lessons can easily be applied to any taxa. We required that students have a background in biology and have completed the general biology series. Additionally, it is helpful if students have taken a course in Evolution, though this was not a requirement. We do not require any coding experience in R or Bash/UNIX. The course consists of one 1.5 hour lecture per week. The lectures begin with a power point presentation where we introduce the weeks concept (for example, PCAs) and then are followed by a live coding demonstrations and exercises. The first 5 weeks are primarily training in bash/UNIX and R basics. The remaining weeks are focused on performing a specific analysis (PCA, GWAS, Fst-outlier analyses, etc). We provide all the data for the students to complete each weeks coding activies along with instructions for how to download the data. 1.1 Cloud computing versus individual laptops This course was designed to be carried out on the NSF funded Extreme Science and Engineering Discovery Environment (XSEDE) cloud computing resource Jetstream2. Jetstream is a unique user-friendly cloud computing resource in that it provides the students with an environment with root privileges, making program installation less complicated. Jetstream also provides a Desktop simulator which allows students to transition between bash and R using the same exact directory paths as the instructor, reducing the confusion of students having unique file paths and providing a more streamlined approach to what for many students is their first coding class. Jetstream educational allocations can be applied for through XSEDE. The process of applying for a jetstream allocation for educational purposes is relatively straightforward and simply requires a course description, the number of students anticipated to participate, and a calculation of the computing resources required, and the instructors CV. Allocations are typically approved in two to three days and can be submitted ~2 weeks prior to the start of the course. Alternatively, these course materials can be used on students and instructors individual laptops. The file paths will need to be modified and we cannot guarantee that the installation of programs and R packages will proceed as they did on Jetstream. Thus, progam installation will need to be verified for each week by the instructor. 1.2 Meet our instructors! Erica Nielsen, Postdoc, lead instructor (esnielsen@ucdavis.edu) Website. Tali Magory, Postdoc, co-instructor (talimagory@gmail.com) Leslie Guerrero, Graduate student, co-instructor (leaguerrero@ucdavis.edu) Brooke Benson, Graduate student, teaching assistant (bebenson@ucdavis.edu) 1.3 Schedule Lecture Thursdays 12:10-1:30 Office hours: virtual - will be determined based on poll "],["week-1--welcome.html", "2 Week 1- Welcome! 2.1 Introduction to shell computing via the data carpentry tutorial 2.2 How to access the shell 2.3 Best practices for Jetstream 2.4 Week 1 Objectives 2.5 Navigating your file system 2.6 Shortcut: Tab Completion 2.7 Summary &amp; Key Points 2.8 Navigating Files and Directories 2.9 Moving around the file system Exercise 2.10 Navigating practice and finding hidden directories Exercise 2.11 Examining the contents of other directories Exercise 2.12 Full vs Relative Paths Exercise 2.13 Navigational shortcuts 2.14 Key Points", " 2 Week 1- Welcome! Welcome to Marine Genomics Spring 2022 at UC Davis! You will find the lecture for week one here 2.1 Introduction to shell computing via the data carpentry tutorial We will be following the data carpentry tutorial (Copyright 2016 @ Software Carpentry) Introduction to the command line for genomics. We have made some modifications to the data carpentry tutorial to fit our course. What is a shell and why should I care? A shell is a computer program that presents a command line interface which allows you to control your computer using commands entered with a keyboard instead of controlling graphical user interfaces (GUIs) with a mouse/keyboard combination. There are many reasons to learn about the shell: Many bioinformatics tools can only be used through a command line interface, or have extra capabilities in the command line version that are not available in the GUI. This is true, for example, of BLAST, which offers many advanced functions only accessible to users who know how to use a shell. The shell makes your work less boring. In bioinformatics you often need to do the same set of tasks with a large number of files. Learning the shell will allow you to automate those repetitive tasks and leave you free to do more exciting things. The shell makes your work less error-prone. When humans do the same thing a hundred different times (or even ten times), theyre likely to make a mistake. Your computer can do the same thing a thousand times with no mistakes. The shell makes your work more reproducible. When you carry out your work in the command-line (rather than a GUI), your computer keeps a record of every step that youve carried out, which you can use to re-do your work when you need to. It also gives you a way to communicate unambiguously what youve done, so that others can check your work or apply your process to new data. Many bioinformatic tasks require large amounts of computing power and cant realistically be run on your own machine. These tasks are best performed using remote computers or cloud computing, which can only be accessed through a shell. In this lesson you will learn how to use the command line interface to move around in your file system. 2.2 How to access the shell For this course we will be using the shell in our Jetstream2 allocation through xsede. Jetstream2 is a cloud computing resource for which we have been allocated resources for the purposes of this course. Below is a guide for accessing and using jetstream. In jetstream we launch what they call an instance which is a small allocation that specifies how much memory you need and reflects how much computing you might do (well guide you through this). Youll find the Jetstream login here To log in first click on the add allocation button Then click add XSEDE account This will redirect you to the xsede login page. Your organization should say xsede. Click continue Next it will ask for xsede login details. Everyone should have made an account in preparation for the course. If you still need to create an account, you can find instructions here. For assistance with creating an xsede account contact Erica Nielsen (esnielsen@ucdavis.edu) Once youve logged in you should be redirected to Jetstream2. You should now be able to join the allocation for the course. Click on course allocation box on the left. It should take you to a page that looks like this: Once within the course allocation we can create our first instance. Go to the Create tab and select instance. Select the Ubuntu v.20.04 instance source. This will automatically generate a name, which we suggest you edit to something more meaningful, such as MarGen2022_(yourname). Select the small instance size m3.small Select yes for enabling web desktop. This will give a warning but that is okay. It will take several minutes to build our instance. Once its ready to go you should see a green Ready sign. Now we can go to the Connect to tab, and select web desktop. You should see something like the little desktop below. It may ask you to authenticate to set the time zone, but you can just press cancel. Follow the prompts, pressing next and skip in the upper right on the window. We using the command line application called Terminal. Select the grid of boxes on the bottom of side bar to show applications. You can type terminal in the search bar at the top, or scroll to find the Terminal application. It will open a new window that has the $ prompt. 2.3 Best practices for Jetstream Once you launch your instance and its active its ready to use. When youre done coding its best to close your jetstream desktop and projects folder browser window. If you are going to step away from jetstream for a while (say over the weekend), its best to Shelve your instance. Once youre ready to code again you just have to select Resume to start your instance again. This will take a few minutes. If in doubt of whether you should shelve or keep active, its our recommendation to suspend your instance. This frees up resources for other users and should reduce the likelihood of your active instance freezing up and being inaccessible. If you get an error while trying to log in or open the web shell or web desktop, follow these tips: log out of the jetstream home page and log back in relaunch your instance reboot your instance If those options fail then it is likely best to delete the instance and relaunch a new instance. This will result in you losing your data or work, but that should not be terribly detrimental to the course as everything resets with new data each week. 2.4 Week 1 Objectives Questions to answer: How can I perform operations on files outside of my working directory? What are some navigational shortcuts I can use to make my work more efficient? Main Tasks: Use a single command to navigate multiple steps in your directory structure, including moving backwards (one level up). Perform operations on files in directories outside your working directory. Work with hidden directories and hidden files. Interconvert between absolute and relative paths. Employ navigational shortcuts to move around your file system. 2.5 Navigating your file system The part of the operating system responsible for managing files and directories is called the file system. It organizes our data into files, which hold information, and directories (also called folders), which hold files or other directories. Several commands are frequently used to create, inspect, rename, and delete files and directories. $ The dollar sign is a prompt, which shows us that the shell is waiting for input; your shell may use a different character as a prompt and may add information before the prompt. When typing commands, either from these lessons or from other sources, do not type the prompt, only the commands that follow it. Lets find out where we are by running a command called pwd (which stands for print working directory). At any moment, our current working directory is our current default directory, i.e., the directory that the computer assumes we want to run commands in, unless we explicitly specify something else. Here, the computers response is /home/exouser, which is the top level directory within our cloud system: Note: You should be able to directly copy and paste code from this webpage using: shift+control+V $ pwd /home/exouser Lets look at how our file system is organized. We can see what files and subdirectories are in this directory by running ls, which stands for listing: $ ls Desktop Documents Downloads Music Pictures Public Templates Videos ls prints the names of the files and directories in the current directory in alphabetical order, arranged neatly into columns. Well make a new subdirectory MarineGenomics where we will be creating new subdirectories throughout this workshop. To make a new directory type the command mkdir followed by the name of the directory, in this case MarineGenomics. $ mkdir MarineGenomics Check that its there with ls $ ls Desktop Documents Downloads Music Pictures Public Templates Videos MarineGenomics The command to change locations in our file system is cd, followed by a directory name to change our working directory. cd stands for change directory. Lets say we want to navigate to the MarineGenomics directory we saw above. We can use the following command to get there: $ cd MarineGenomics $ pwd /home/exouser/MarineGenomics Use ls to see what is inside MarineGenomics $ ls It should be empty because we just created it and havent put anything in it yet. Lets download some data to work with. Lets first navigate back to our home directory. cd There are many ways to do transfer files and download data. We can use the command wget which needs a link to the file that we want to download. If theres a file saved on a website somewhere (anywhere on the internet) wget will download it for you. $ wget https://raw.githubusercontent.com/BayLab/MarineGenomicsData/main/week1.tar.gz We now need to untar that file so we can access the contents tar -xzvf week1.tar.gz Now that we have something in our MarineGenomics directory. Move back into that directory. We can now use the ls command a bit more. cd MarineGenomics We can make the ls output more comprehensible by using the flag -F, which tells ls to add a trailing / to the names of directories: $ ls -F week1/ Anything with a / after it is a directory. Things with a * after them are executable. If there are no decorations, its a file. ls has lots of other options. To find out what they are, we can type: $ man ls man (short for manual) displays detailed documentation (also referred as man page or man file) for bash commands. It is a powerful resource to explore bash commands, understand their usage and flags. Some manual files are very long. You can scroll through the file using your keyboards down arrow or use the Space key to go forward one page and the b key to go backwards one page. When you are done reading, hit q to quit. Use the -l option for the ls command to display more information for each item in the directory. What is one piece of additional information this long format gives you that you dont see with the bare ls command? $ ls -l No one can possibly learn all of these arguments, thats what the manual page is for. You can (and should) refer to the manual page or other help files as needed. Now lets cd into the data directory and then use ls to see whats in that directory. $ cd week1 $ ls -F SRR6805880_1.fastq SRR6805880_2.fastq This directory contains two files with .fastq extensions. FASTQ is a format for storing information about sequencing reads and their quality. We will be learning more about FASTQ files in a later lesson. 2.6 Shortcut: Tab Completion Typing out file or directory names can waste a lot of time and its easy to make typing mistakes. Instead we can use tab complete as a shortcut. When you start typing out the name of a directory or file, then hit the Tab key, the shell will try to fill in the rest of the directory or file name. Return to your home directory: $ cd then enter $ cd Mar&lt;tab&gt; The shell will fill in the rest of the directory name for MarineGenomics. Now change directories to week1 in MarineGenomics $ cd MarineGenomics $ cd week1 Using tab complete can be very helpful. However, it will only autocomplete a file or directory name if youve typed enough characters to provide a unique identifier for the file or directory you are trying to access. For example, if we now try to list the files which names start with SR by using tab complete: $ ls SR&lt;tab. The shell auto-completes your command to SRR6805880_, because all file names in the directory begin with this prefix. When you hit Tab again, the shell will list the possible choices. $ ls SRR68&lt;tab&gt;&lt;tab&gt; SRR6805880_1.fastq SRR6805880_2.fastq Tab completion can also fill in the names of commands, which can be useful if you remember the beginning of a command name. $ pw&lt;tab&gt;&lt;tab&gt; pwck pwconv pwd pwdx pwunconv Displays the name of every program that starts with pw. 2.7 Summary &amp; Key Points We now know how to move around our file system using the command line. This gives us an advantage over interacting with the file system through a GUI as it allows us to work on a remote server, carry out the same set of operations on a large number of files quickly, and opens up many opportunities for using bioinformatic software that is only available in command line versions. In the next few episodes, well be expanding on these skills and seeing how using the command line shell enables us to make our workflow more efficient and reproducible. The shell gives you the ability to work more efficiently by using keyboard commands rather than a GUI. Useful commands for navigating your file system include: ls, pwd, and cd. Most commands take options (flags) which begin with a -. Tab completion can reduce errors from mistyping and make work more efficient in the shell. 2.8 Navigating Files and Directories This continues the shell module from Data Carpentrys introduction to the shell, which can be found here https://datacarpentry.org/shell-genomics/02-the-filesystem/index.html 2.9 Moving around the file system Weve learned how to use pwd to find our current location within our file system. Weve also learned how to use cd to change locations and ls to list the contents of a directory. Now were going to learn some additional commands for moving around within our file system. Use the commands weve learned so far to navigate to the MarineGenomics/week1 directory, if youre not already there. $ cd $ cd MarineGenomics $ cd week1 Exercise Make a new directory in /week1 and name it after your favorite marine species. Navigate into that directory. Use the command line to show your neighbors that you are indeed within that directory. Solution $ mkdir salpsRcool $ cd salpsRcool $ pwd Now we want to move back up and out of this directory into our top level directory. Can we type cd MarineGenomics? Try it and see what happens. $ cd MarineGenomics -bash: cd: MarineGenomics: No such file or directory Your computer looked for a directory or file called MarineGenomics within the directory you were already in. It didnt know you wanted to look at a directory level above the one you were located in. We have a special command to tell the computer to move us back or up one directory level. $ cd .. Now we can use pwd to make sure that we are in the directory we intended to navigate to, and ls to check that the contents of the directory are correct. $ pwd home/exouser/MarineGenomics $ ls week1 From this output, we can see that .. did indeed take us back one level in our file system. You can chain these together like so: $ ls ../../ prints the contents of /home. 2.10 Navigating practice and finding hidden directories Exercise Go back to your home directory. From there list the contents of the home directory. There are hidden directories in our home directory. Explore the options for ls to find out how to see hidden directories. List the contents of the directory and identify the name of the text file in that directory. Hint: hidden files and folders in Unix start with ., for example .my_hidden_directory Solution $ cd Lets look at some of the options for the ls function using the man command (note this will print out several lines of text) $ man ls The -a option is short for all and says that it causes ls to not ignore entries starting with . This is the option we want. $ ls -a . .ICEauthority .Rhistory .ansible .bash_logout .cache .dbus .fontconfig .local .r .ssh .wget-hsts Desktop Downloads Pictures Templates .. .Renviron .Xauthority .bash_history .bashrc .config .emacs.d .gnupg .profile .rstudio-desktop .vnc .xsession-errors Documents Music Public Videos Youll see there are many more files shown now that we can look at the hidden ones. In most commands the flags can be combined together in no particular order to obtain the desired results/output. $ ls -Fa $ ls -laF 2.11 Examining the contents of other directories By default, the ls commands lists the contents of the working directory (i.e. the directory you are in). You can always find the directory you are in using the pwd command. However, you can also give ls the names of other directories to view. Navigate to your home directory if you are not already there. $ cd Then enter the command: $ ls MarineGenomics week1 This will list the contents of the MarineGenomics directory without you needing to navigate there. The cd command works in a similar way. Try entering: $ cd $ cd MarineGenomics/week1 This will take you to the MarineGenomics directory without having to go through an intermediate directory. Navigating practice Exercise Navigate to your home directory. Check that you are in the correct directory. From within the home direcroty, list the contents of the week1 directory. Solution $ cd $ pwd $ ls MarineGenomics/week1 SRR6805880_1.fastq SRR6805880_2.fastq 2.12 Full vs Relative Paths The cd command takes an argument which is a directory name. Directories can be specified using either a relative path or a full absolute path. The directories on the computer are arranged into a hierarchy. The full path tells you where a directory is in that hierarchy. Navigate to the home directory, then enter the pwd command. $ cd $ pwd You should see: /home/exouser This is the full name of your home directory. This tells you that you are in a directory called exouser, which sits inside a directory called home which sits inside the very top directory in the hierarchy. The very top of the hierarchy is a directory called / which is usually referred to as the root directory. So, to summarize: exouser is a directory in home which is a directory in /. More on root and home in the next section. Now enter the following command: $ cd /home/exouser/MarineGenomics/week1 This jumps several levels to the week1 directory. Now go back to the home directory. $ cd You can also navigate to the week1 directory using: $ cd MarineGenomics/week1 These two commands have the same effect, they both take us to the week1 directory. The first uses the absolute path, giving the full address from the home directory. The second uses a relative path, giving only the address from the working directory. A full path always starts with a /. A relative path does not. A relative path is like getting directions from someone on the street. They tell you to go right at the stop sign, and then turn left on Main Street. That works great if youre standing there together, but not so well if youre trying to tell someone how to get there from another country. A full path is like GPS coordinates. It tells you exactly where something is no matter where you are right now. You can usually use either a full path or a relative path depending on what is most convenient. If we are in the home directory, it is more convenient to enter the full path. If we are in the working directory, it is more convenient to enter the relative path since it involves less typing. Over time, it will become easier for you to keep a mental note of the structure of the directories that you are using and how to quickly navigate amongst them. Exercise Navigate to your home directory Use cd with the full path to go into the directory you named after your favorite marine taxa Within that directory examine the contents of MarineGenomics/week1 Then navigate to the directory two levels above Solution $ cd $ pwd $ cd /home/exouser/MarineGenomics/week1/*your_unique_directory $ pwd $ ls .. $ cd ../../ $ pwd 2.13 Navigational shortcuts The root directory is the highest level directory in your file system and contains files that are important for your computer to perform its daily work. While you will be using the root (/) at the beginning of your absolute paths, it is important that you avoid working with data in these higher-level directories, as your commands can permanently alter files that the operating system needs to function. In many cases, trying to run commands in root directories will require special permissions which will be discussed later, so its best to avoid them and work within your home directory. Dealing with the home directory is very common. The tilde character, ~, is a shortcut for your home directory. In our case, the root directory is two levels above our home directory, so cd or cd ~ will take you to /home/exouser and cd / will take you to /. Navigate to the MarineGenomics directory: $ cd $ cd MarineGenomics Then enter the command: $ ls ~ Desktop Documents Downloads Music Pictures Public Templates Videos MarineGenomics This prints the contents of your home directory, without you needing to type the full path. The commands cd, and cd ~ are very useful for quickly navigating back to your home directory. We will be using the ~ character in later lessons to specify our home directory. A quick guide for directories is: / = root dir, ~/= home dir ./= current dir 2.14 Key Points The /, ~, and .. characters represent important navigational shortcuts. Hidden files and directories start with . and can be viewed using ls -a. Relative paths specify a location starting from the current location, while absolute paths specify a location from the root of the file system. "],["week-2-working-with-files.html", "3 Week 2-Working With Files 3.1 Our data set: FASTQ files 3.2 Wildcards Exercise Solution Exercise Solution 3.3 Command History Exercise Solution 3.4 Examining Files Exercise Solution Exercise Solution 3.5 Details on the FASTQ format 3.6 Creating, moving, copying, and removing Exercise Solution 3.7 Searching within, editing, and redirecting files 3.8 Searching files 3.9 Redirecting output 3.10 Writing Scripts and Working with Data 3.11 Writing files 3.12 Writing scripts 3.13 Computing magic with for loops 3.14 Using Basename in for loops", " 3 Week 2-Working With Files Welcome to week 2! In this session we will be going over more tools to help us navigate our file system, view and manipulate files, and write basic scripts with bash/unix. Questions: How can I view and search file contents? How can I create, copy and delete files and directories? How can I control who has permission to modify a file? How can I repeat recently used commands? Objectives: View, search within, copy, move, and rename files. Create new directories. Use wildcards (*) to perform operations on multiple files. Make a file read only. Use the history command to view and repeat recently used commands. Before we start we need to download our data. The data for each week will be in a .tar.gz file that we will uncompress into our MarineGenomics Directory. $ cd /home/exouser/ $ wget https://raw.githubusercontent.com/BayLab/MarineGenomicsData/main/week2_quarter.tar.gz # use tar to uncompress the file $ tar -xzvf week2_quarter.tar.gz 3.1 Our data set: FASTQ files Now that we know how to navigate around our directory structure, lets start working with our sequencing files. We did a sequencing experiment and have two results files, which are stored in our untrimmed_fastq directory. 3.2 Wildcards Navigate to your untrimmed_fastq directory: $ cd ~/MarineGenomicsData/Week2/untrimmed_fastq We are interested in looking at the FASTQ files in this directory. We can list all files with the .fastq extension using the command: $ ls *.fastq SRR097977.fastq SRR098026.fastq The * character is a special type of character called a wildcard, which can be used to represent any type of character. Thus, *.fastq matches every file that ends with .fastq. This command: $ ls *977.fastq SRR097977.fastq lists only the file that ends with 977.fastq. This command: $ ls /usr/bin/*.sh /usr/bin/gettext.sh /usr/bin/nvidia-bug-report.sh /usr/bin/rescan-scsi-bus.sh Lists every file in /usr/bin that ends in the characters .sh. Note that the output displays full paths to files, since each result starts with /. Exercise Do each of the following tasks from your current directory using a single ls command for each: List all of the files in /usr/bin that start with the letter c List all of the files in /usr/bin that contain the letter a List all of the files in /usr/bin that end with the letter o Bonus: List all of the files in /usr/bin that contain the letter a or the letter c Hint: The bonus question requires a Unix wildcard that we havent talked about yet. Try searching the internet for information about Unix wildcards to find what you need to solve the bonus problem. Solution Solution ls /usr/bin/c* ls /usr/bin/*a* ls /usr/bin/*o Bonus: ls /usr/bin/*[ac]* Exercise echo is a built-in shell command that writes its arguments, like a line of text to a standard output. The echo command can also be used with pattern matching characters, such as wildcard characters. Here we will use the echo command to see how the wildcard character is interpreted by the shell. $ echo *.fastq SRR097977.fastq SRR098026.fastq The * is expanded to include any file that ends with .fastq. We can see that the output of echo *.fastq is the same as that of ls *.fastq. What would the output look like if the wildcard could not be matched? Compare the outputs of echo *.missing and ls *.missing. Solution Solution $ echo *.missing *.missing $ ls *.missing ls: cannot access &#39;*.missing&#39;: No such file or directory 3.3 Command History If you want to repeat a command that youve run recently, you can access previous commands using the up arrow on your keyboard to go back to the most recent command. Likewise, the down arrow takes you forward in the command history. A few more useful shortcuts: Ctrl+C will cancel the command you are writing, and give you a fresh prompt. Ctrl+R will do a reverse-search through your command history. This is very useful. Ctrl+L or the clear command will clear your screen. You can also review your recent commands with the history command, by entering: $ history to see a numbered list of recent commands. You can reuse one of these commands directly by referring to the number of that command. For example, if your history looked like this: 259 ls * 260 ls /usr/bin/*.sh 261 ls *R1*fastq then you could repeat command #260 by entering: $ !260 Type ! (exclamation point) and then the number of the command from your history. You will be glad you learned this when you need to re-run very complicated commands. For more information on advanced usage of history, read section 9.3 of Bash manual. Exercise Find the line number in your history for the command that listed all the .sh files in /usr/bin. Rerun that command. Solution Solution First type history. Then use ! followed by the line number to rerun that command. 3.4 Examining Files We now know how to switch directories, run commands, and look at the contents of directories, but how do we look at the contents of files? One way to examine a file is to print out all of the contents using the command cat. Enter the following command from within the untrimmed_fastq directory: $ cat SRR098026.fastq This will print out all of the contents of the SRR098026.fastq to the screen. Exercise Print out the contents of the ./MarineGenomicsData/Week2/untrimmed_fastq/SRR097977.fastq file. What is the last line of the file? From your home directory, and without changing directories, use one short command to print the contents of all of the files in the ./MarineGenomicsData/Week2/untrimmed_fastq directory. Solution Solution The last line of the file is C:CCC::CCCCCCCC&lt;8?6A:C28C&lt;608'&amp;&amp;&amp;,'$. 2a. cd ~ 2b. cat ./MarineGenomicsData/Week2/untrimmed_fastq/* cat is a terrific command, but when the file is really big, it can be annoying to use. The program, less, is useful for this case. less opens the file as read only, and lets you navigate through it. Enter the following command: $ less SRR097977.fastq Some navigation commands in less: key action Space to go forward b to go backward g to go to the beginning G to go to the end q to quit less also gives you a way of searching through files. Use the / key to begin a search. Enter the word you would like to search for and press enter. The screen will jump to the next location where that word is found. Shortcut: If you hit / then enter, less will repeat the previous search. less searches from the current location and works its way forward. Note, if you are at the end of the file and search for the sequence CAA, less will not find it. You either need to go to the beginning of the file (by typing g) and search again using / or you can use ? to search backwards in the same way you used / previously. For instance, lets search forward for the sequence TTTTT in our file. You can see that we go right to that sequence, what it looks like, and where it is in the file. If you continue to type / and hit return, you will move forward to the next instance of this sequence motif. If you instead type ? and hit return, you will search backwards and move up the file to previous examples of this motif. Exercise What are the next three nucleotides (characters) after the first instance of TTTTT? Solution Solution CAC Remember, the man command actually uses less internally and therefore uses the same commands, so you can search documentation using / as well! Theres another way that we can look at files, and in this case, just look at part of them. This can be particularly useful if we just want to see the beginning or end of the file, or see how its formatted. The commands are head and tail and they let you look at the beginning and end of a file, respectively. $ head SRR098026.fastq @SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35 NNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNN +SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35 !!!!!!!!!!!!!!!!#!!!!!!!!!!!!!!!!!! @SRR098026.2 HWUSI-EAS1599_1:2:1:0:312 length=35 NNNNNNNNNNNNNNNNANNNNNNNNNNNNNNNNNN +SRR098026.2 HWUSI-EAS1599_1:2:1:0:312 length=35 !!!!!!!!!!!!!!!!#!!!!!!!!!!!!!!!!!! @SRR098026.3 HWUSI-EAS1599_1:2:1:0:570 length=35 NNNNNNNNNNNNNNNNANNNNNNNNNNNNNNNNNN $ tail SRR098026.fastq +SRR098026.247 HWUSI-EAS1599_1:2:1:2:1311 length=35 #!##!#################!!!!!!!###### @SRR098026.248 HWUSI-EAS1599_1:2:1:2:118 length=35 GNTGNGGTCATCATACGCGCCCNNNNNNNGGCATG +SRR098026.248 HWUSI-EAS1599_1:2:1:2:118 length=35 B!;?!A=5922:##########!!!!!!!###### @SRR098026.249 HWUSI-EAS1599_1:2:1:2:1057 length=35 CNCTNTATGCGTACGGCAGTGANNNNNNNGGAGAT +SRR098026.249 HWUSI-EAS1599_1:2:1:2:1057 length=35 A!@B!BBB@ABAB#########!!!!!!!###### The -n option to either of these commands can be used to print the first or last n lines of a file. $ head -n 1 SRR098026.fastq @SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35 $ tail -n 1 SRR098026.fastq A!@B!BBB@ABAB#########!!!!!!!###### 3.5 Details on the FASTQ format Although it looks complicated (and it is), its easy to understand the fastq format with a little decoding. Some rules about the format include Line Description 1 Always begins with @ and then information about the read 2 The actual DNA sequence 3 Always begins with a + and sometimes the same info in line 1 4 Has a string of characters which represent the quality scores; must have same number of characters as line 2 We can view the first complete read in one of the files in our dataset by using head to look at the first four lines. $ head -n 4 SRR098026.fastq @SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35 NNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNN +SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35 !!!!!!!!!!!!!!!!#!!!!!!!!!!!!!!!!!! All but one of the nucleotides in this read are unknown (N). This is a pretty bad read! Line 4 shows the quality for each nucleotide in the read. Quality is interpreted as the probability of an incorrect base call. To make it possible to line up each individual nucleotide with its quality score, the numerical score is converted into a code where each character represents the numerical quality score for an individual nucleotide. For example, in the line above, the quality score line is: !!!!!!!!!!!!!!!!#!!!!!!!!!!!!!!!!!! The # character and each of the ! characters represent the encoded quality for an individual nucleotide. The numerical value assigned to each of these characters depends on the sequencing platform that generated the reads. The sequencing machine used to generate our data uses the standard Sanger quality PHRED score encoding, Illumina version 1.8 onwards. Here is a link showing what those different symbols mean for quality scores: https://support.illumina.com/help/BaseSpace_OLH_009008/Content/Source/Informatics/BS/QualityScoreEncoding_swBS.htm Each character is assigned a quality score between 0 and 42 as shown in the chart below. Quality encoding: !&quot;#$%&amp;&#39;()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJK | | | | | Quality score: 0........10........20........30........40.. This quality score is logarithmically based, so a quality score of 10 reflects a base call accuracy of 90%, but a quality score of 20 reflects a base call accuracy of 99%. Looking back at our read: @SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35 NNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNN +SRR098026.1 HWUSI-EAS1599_1:2:1:0:968 length=35 !!!!!!!!!!!!!!!!#!!!!!!!!!!!!!!!!!! We can now see that the quality of each of the Ns is 0 and the quality of the only nucleotide call (C) is also very poor (# = a quality score of 2). This is indeed a very bad read. 3.6 Creating, moving, copying, and removing Now we can move around in the file structure, look at files, and search files. But what if we want to copy files or move them around or get rid of them? Most of the time, you can do these sorts of file manipulations without the command line, but there will be some cases (like when youre working with a remote computer like we are for this lesson) where it will be impossible. Youll also find that you may be working with hundreds of files and want to do similar manipulations to all of those files. In cases like this, its much faster to do these operations at the command line. 3.6.1 Copying Files When working with computational data, its important to keep a safe copy of that data that cant be accidentally overwritten or deleted. For this lesson, that would be our raw data is our FASTQ files. We dont want to accidentally change the original files, so well make a copy of them and change the file permissions so that we can read from, but not write to, the files. First, lets make a copy of one of our FASTQ files using the cp command. Navigate to the ~/MarineGenomicsData/Week2/untrimmed_fastq directory and enter: $ cp SRR098026.fastq SRR098026-copy.fastq $ ls -F SRR097977.fastq* SRR098026-copy.fastq* SRR098026.fastq* We now have two copies of the SRR098026.fastq file, one of them named SRR098026-copy.fastq. Well move this file to a new directory called backup where well store our backup data files. 3.6.2 Creating Directories The mkdir command is used to make a directory. Enter mkdir followed by a space, then the directory name you want to create: $ mkdir backup 3.6.3 Moving / Renaming We can now move our backup file to this directory. We can move files around using the command mv: $ mv SRR098026-copy.fastq backup $ ls backup SRR098026-copy.fastq The mv command is also how you rename files. Lets rename this file to make it clear that this is a backup: $ cd backup $ mv SRR098026-copy.fastq SRR098026-backup.fastq $ ls SRR098026-backup.fastq 3.6.4 File Permissions Weve now made a backup copy of our file, but just because we have two copies, it doesnt make us safe. We can still accidentally delete or overwrite both copies. To make sure we cant accidentally mess up this backup file, were going to change the permissions on the file so that were only allowed to read (i.e. view) the file, not write to it (i.e. make new changes). View the current permissions on a file using the -l (long) flag for the ls command: $ ls -l -rwxrwxr-x 1 exouser exouser 43332 Mar 25 01:23 SRR098026-backup.fastq The first part of the output for the -l flag gives you information about the files current permissions. There are ten slots in the permissions list. The first character in this list is related to file type, not permissions, so well ignore it for now. The next three characters relate to the permissions that the file owner has, the next three relate to the permissions for group members, and the final three characters specify what other users outside of your group can do with the file. Were going to concentrate on the three positions that deal with your permissions (as the file user). Figure by Mary Brent Here the three positions that relate to the file user/owner are rwx. The r means that you have permission to read the file, the w indicates that you have permission to write to (i.e. make changes to) the file, and the third position is x, indicating that you have permission to carry out the ability encoded by that space (this is the space where x or executable ability is stored, well talk more about this in a later lesson). Our goal for now is to change permissions on this file so that you no longer have w or write permissions. We can do this using the chmod (change mode) command and subtracting (-) the write permission -w. $ chmod -w SRR098026-backup.fastq $ ls -l -r-xr-xr-x 1 exouser exouser 43332 Mar 25 01:23 SRR098026-backup.fastq Chmod can also change the permission to only the user (u), group (g), and/or other (o). Lets add reading (r), writing (x), and execute (x) permissions to group owners (because coding is better with friends!). $ chmod g=rwx SRR098026-backup.fastq $ ls -l -r-xrwxr-x 1 exouser exouser 43332 Mar 25 01:23 SRR098026-backup.fastq 3.6.5 Removing To prove to ourselves that you no longer have the ability to modify this file, try deleting it with the rm command: $ rm SRR098026-backup.fastq Youll be asked if you want to override your file permissions: rm: remove write-protected regular file SRR098026-backup.fastq? You should enter n for no. If you enter n (for no), the file will not be deleted. If you enter y, you will delete the file. This gives us an extra measure of security, as there is one more step between us and deleting our data files. Important: The rm command permanently removes the file. Be careful with this command. It doesnt just nicely put the files in the Trash. Theyre really gone. By default, rm will not delete directories. You can tell rm to delete a directory using the -r (recursive) option. Lets delete the backup directory we just made. Enter the following command: $ cd .. $ rm -r backup This will delete not only the directory, but all files within the directory. If you have write-protected files in the directory, you will be asked whether you want to override your permission settings (say yes here). Exercise Starting in the ~/MarineGenomicsData/Week2/untrimmed_fastq/ directory, do the following: 1. Make sure that you have deleted your backup directory and all files it contains. 2. Create a backup of each of your FASTQ files using cp. (Note: Youll need to do this individually for each of the two FASTQ files. We havent learned yet how to do this with a wildcard.) 3. Use a wildcard to move all of your backup files to a new backup directory. 4. Change the permissions on all of your backup files to be write-protected. Solution Solution rm -r backup cp SRR098026.fastq SRR098026-backup.fastq and cp SRR097977.fastq SRR097977-backup.fastq mkdir backup and mv *-backup.fastq backup chmod -w backup/*-backup.fastq Its always a good idea to check your work with ls -l backup. You should see something like: -r--r--r-- 1 dcuser dcuser 47552 Nov 15 23:06 SRR097977-backup.fastq -r--r--r-- 1 dcuser dcuser 43332 Nov 15 23:06 SRR098026-backup.fastq Now you have the ability to edit and explore your directories, and manipulate the files within them! Part 1 Keypoints: You can view file contents using less, cat, head or tail. The commands cp, mv, rm`` andmkdir` are useful for manipulating existing files and creating new directories. You can view file permissions using ls -l and change permissions using chmod. The history command and the up arrow on your keyboard can be used to repeat recently used commands. 3.7 Searching within, editing, and redirecting files Questions: How can I search within files? How can I combine existing commands to do new things? Objectives: Employ the grep command to search for information within files. Print the results of a command to a file. Construct command pipelines with two or more stages. 3.8 Searching files In addition to less, we can also search within files without even opening them, using grep. grep is a command-line utility for searching plain-text files for lines matching a specific set of characters (sometimes called a string). Lets give it a try! Nucleotide abbreviations The four nucleotides that appear in DNA are abbreviated A, C, T and G. Unknown nucleotides are represented with the letter N. An N appearing in a sequencing file represents a position where the sequencing machine was not able to confidently determine the nucleotide in that position. You can think of an N as being aNy nucleotide at that position in the DNA sequence. Well search for strings inside of our fastq files. Lets first make sure we are in the correct directory: $ cd ~/MarineGenomicsData/Week2/untrimmed_fastq Suppose we want to see how many reads in our file have really bad segments containing 10 consecutive unknown nucleotides (Ns). Determining quality In this lesson, were going to be manually searching for strings of Ns within our sequence results to illustrate some principles of file searching. It can be really useful to do this type of searching to get a feel for the quality of your sequencing results, however, in your research you will most likely use a bioinformatics tool that has a built-in program for filtering out low-quality reads. Youll learn how to use one such tool in a later lesson. Lets search for the string NNNNNNNNNN in the SRR098026 file: $ grep NNNNNNNNNN SRR098026.fastq This command returns a lot of output to the terminal. Every single line in the SRR098026 file that contains at least 10 consecutive Ns is printed to the terminal, regardless of how long or short the file is. We may be interested not only in the actual sequence which contains this string, but in the name (or identifier) of that sequence. We discussed previously that the identifier line immediately precedes the nucleotide sequence for each read in a FASTQ file. We may also want to inspect the quality scores associated with each of these reads. To get all of this information, we will return the line immediately before each match and the two lines immediately after each match. We can use the -B argument for grep to return a specific number of lines before each match. The -A argument returns a specific number of lines after each matching line. Here we want the line before and the two lines after each matching line, so we add -B1 -A2 to our grep command: $ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq One of the sets of lines returned by this command is: @SRR098026.177 HWUSI-EAS1599_1:2:1:1:2025 length=35 CNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN +SRR098026.177 HWUSI-EAS1599_1:2:1:1:2025 length=35 #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Exercise Search for the sequence GNATNACCACTTCC in the SRR098026.fastq file. Have your search return all matching lines and the name (or identifier) for each sequence that contains a match. Search for the sequence AAGTT in both FASTQ files. Have your search return all matching lines and the name (or identifier) for each sequence that contains a match. Solution Solution grep -B1 GNATNACCACTTCC SRR098026.fastq @SRR098026.245 HWUSI-EAS1599_1:2:1:2:801 length=35 GNATNACCACTTCCAGTGCTGANNNNNNNGGGATG grep -B1 AAGTT *.fastq SRR097977.fastq-@SRR097977.11 209DTAAXX_Lenski2_1_7:8:3:247:351 length=36 SRR097977.fastq:GATTGCTTTAATGAAAAAGTCATATAAGTTGCCATG -- SRR097977.fastq-@SRR097977.67 209DTAAXX_Lenski2_1_7:8:3:544:566 length=36 SRR097977.fastq:TTGTCCACGCTTTTCTATGTAAAGTTTATTTGCTTT -- SRR097977.fastq-@SRR097977.68 209DTAAXX_Lenski2_1_7:8:3:724:110 length=36 SRR097977.fastq:TGAAGCCTGCTTTTTTATACTAAGTTTGCATTATAA -- SRR097977.fastq-@SRR097977.80 209DTAAXX_Lenski2_1_7:8:3:258:281 length=36 SRR097977.fastq:GTGGCGCTGCTGCATAAGTTGGGTTATCAGGTCGTT -- SRR097977.fastq-@SRR097977.92 209DTAAXX_Lenski2_1_7:8:3:353:318 length=36 SRR097977.fastq:GGCAAAATGGTCCTCCAGCCAGGCCAGAAGCAAGTT -- SRR097977.fastq-@SRR097977.139 209DTAAXX_Lenski2_1_7:8:3:703:655 length=36 SRR097977.fastq:TTTATTTGTAAAGTTTTGTTGAAATAAGGGTTGTAA -- SRR097977.fastq-@SRR097977.238 209DTAAXX_Lenski2_1_7:8:3:592:919 length=36 SRR097977.fastq:TTCTTACCATCCTGAAGTTTTTTCATCTTCCCTGAT -- SRR098026.fastq-@SRR098026.158 HWUSI-EAS1599_1:2:1:1:1505 length=35 SRR098026.fastq:GNNNNNNNNCAAAGTTGATCNNNNNNNNNTGTGCG 3.9 Redirecting output grep allowed us to identify sequences in our FASTQ files that match a particular pattern. All of these sequences were printed to our terminal screen, but in order to work with these sequences and perform other operations on them, we will need to capture that output in some way. We can do this with something called redirection. The idea is that we are taking what would ordinarily be printed to the terminal screen and redirecting it to another location. In our case, we want to print this information to a file so that we can look at it later and use other commands to analyze this data. The command for redirecting output to a file is &gt;. Lets try out this command and copy all the records (including all four lines of each record) in our FASTQ files that contain NNNNNNNNNN to another file called bad_reads.fastq. $ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq &gt; bad_reads.fastq File extensions In the code above, we have saved the bad reads as a FASTQ file, which may seem like the obvious file extension as it will be holding FASTQ formatted data that were extracting from our FASTQ files. But as we proceed with the exercises, we will be working with the exact same file, which we will now save as a .txt file. This will still be a FASTQ file even though it does not have a name with a .fastq extension. We are doing this as using a .fastq extension will lead us to problems when we move to using wildcards later in this episode. Well point out where this becomes important. For now, its good that were thinking about file extensions! $ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq &gt; bad_reads.txt The prompt should sit there a little bit, and then it should look like nothing happened. But type ls. You should see a new file called bad_reads.txt. We can check the number of lines in our new file using a command called wc. wc stands for word count. This command counts the number of words, lines, and characters in a file. The FASTQ file may change over time, so given the potential for updates, make sure your file matches your instructors output. wc gives the following output: $ wc bad_reads.txt 537 1073 23217 bad_reads.txt This will tell us the number of lines, words and characters in the file. If we want only the number of lines, we can use the -l flag for lines. $ wc -l bad_reads.txt 537 bad_reads.txt Exercise How many sequences are there in SRR098026.fastq? Remember that every sequence is formed by four lines. Solution Solution $ wc -l SRR098026.fastq 996 Now you can divide this number by four to get the number of sequences in your fastq file Exercise How many sequences in SRR098026.fastq contain at least 3 consecutive Ns? Solution Solution $ grep NNN SRR098026.fastq &gt; bad_reads.txt $ wc -l bad_reads.txt 249 We might want to search multiple FASTQ files for sequences that match our search pattern. However, we need to be careful, because each time we use the &gt; command to redirect output to a file, the new output will replace the output that was already present in the file. This is called overwriting and, just like you dont want to overwrite your video recording of your kids first birthday party, you also want to avoid overwriting your data files. $ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq &gt; bad_reads.txt $ wc -l bad_reads.txt 537 bad_reads.txt $ grep -B1 -A2 NNNNNNNNNN SRR097977.fastq &gt; bad_reads.txt $ wc -l bad_reads.txt 0 bad_reads.txt Here, the output of our second call to wc shows that we no longer have any lines in our bad_reads.txt file. This is because the second file we searched (SRR097977.fastq) does not contain any lines that match our search sequence. So our file was overwritten and is now empty. We can avoid overwriting our files by using the command &gt;&gt;. &gt;&gt; is known as the append redirect and will append new output to the end of a file, rather than overwriting it. $ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq &gt; bad_reads.txt $ wc -l bad_reads.txt 537 bad_reads.txt $ grep -B1 -A2 NNNNNNNNNN SRR097977.fastq &gt;&gt; bad_reads.txt $ wc -l bad_reads.txt 537 bad_reads.txt The output of our second call to wc shows that we have not overwritten our original data. We can also do this with a single line of code by using a wildcard: $ grep -B1 -A2 NNNNNNNNNN *.fastq &gt; bad_reads.txt $ wc -l bad_reads.txt 537 bad_reads.txt File extensions - part 2 This is where we would have trouble if we were naming our output file with a .fastq extension. If we already had a file called bad_reads.fastq (from our previous grep practice) and then ran the command above using a .fastq extension instead of a .txt extension, grep would give us a warning. grep -B1 -A2 NNNNNNNNNN *.fastq &gt; bad_reads.fastq grep: input file bad_reads.fastq is also the output grep is letting you know that the output file bad_reads.fastq is also included in your grep call because it matches the *.fastq pattern. Be careful with this as it can lead to some unintended results. Since we might have multiple different criteria we want to search for, creating a new output file each time has the potential to clutter up our workspace. We also thus far havent been interested in the actual contents of those files, only in the number of reads that weve found. We created the files to store the reads and then counted the lines in the file to see how many reads matched our criteria. Theres a way to do this, however, that doesnt require us to create these intermediate files - the pipe command (|). What | does is take the output of that command and immediately uses it as an input to another command. Maybe our goal is to just look at an output of a grep command, so instead of typing a grep command and then subsequently typing less, we can save time and effort by piping them together! Here we redirect our output from our grep call through the less command. $ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq | less We can now see the output from our grep call within the less interface. We can use the up and down arrows to scroll through the output and use q to exit less. If we dont want to create a file before counting lines of output from our grep search, we could directly pipe the output of the grep search to the command wc -l. This can be helpful for investigating your output if you are not sure you would like to save it to a file. $ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq | wc -l Because we asked grep for all four lines of each FASTQ record, we need to divide the output by four to get the number of sequences that match our search pattern. Since 802 / 4 = 200.5 and we are expecting an integer number of records, there is something added or missing in bad_reads.txt. If we explore bad_reads.txt using less, we might be able to notice what is causing the uneven number of lines. Luckily, this issue happens by the end of the file so we can also spot it with tail. $ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq &gt; bad_reads.txt $ tail bad_reads.txt @SRR098026.133 HWUSI-EAS1599_1:2:1:0:1978 length=35 ANNNNNNNNNTTCAGCGACTNNNNNNNNNNGTNGN +SRR098026.133 HWUSI-EAS1599_1:2:1:0:1978 length=35 #!!!!!!!!!##########!!!!!!!!!!##!#! -- -- @SRR098026.177 HWUSI-EAS1599_1:2:1:1:2025 length=35 CNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN +SRR098026.177 HWUSI-EAS1599_1:2:1:1:2025 length=35 #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! The fifth and six lines in the output display  which is the default action for grep to separate groups of lines matching the pattern, and indicate groups of lines which did not match the pattern so are not displayed. To fix this issue, we can redirect the output of grep to a second instance of grep as follows. $ grep -B1 -A2 NNNNNNNNNN SRR098026.fastq | grep -v &#39;^--&#39; &gt; bad_reads.fastq tail bad_reads.fastq +SRR098026.132 HWUSI-EAS1599_1:2:1:0:320 length=35 #!!!!!!!!!##########!!!!!!!!!!##!#! @SRR098026.133 HWUSI-EAS1599_1:2:1:0:1978 length=35 ANNNNNNNNNTTCAGCGACTNNNNNNNNNNGTNGN +SRR098026.133 HWUSI-EAS1599_1:2:1:0:1978 length=35 #!!!!!!!!!##########!!!!!!!!!!##!#! @SRR098026.177 HWUSI-EAS1599_1:2:1:1:2025 length=35 CNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN +SRR098026.177 HWUSI-EAS1599_1:2:1:1:2025 length=35 #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! The -v option in the second grep search stands for --invert-match meaning grep will now only display the lines which do not match the searched pattern, in this case '^--'. The caret (^) is an anchoring character matching the beginning of the line, and the pattern has to be enclose by single quotes so grep does not interpret the pattern as an extended option (starting with ). Redirecting output is often not intuitive, and can take some time to get used to. Once youre comfortable with redirection, however, youll be able to combine any number of commands to do all sorts of exciting things with your data! None of the command line programs weve been learning do anything all that impressive on their own, but when you start chaining them together, you can do some really powerful things very efficiently. Keypoints: grep is a powerful search tool with many options for customization. &gt;, &gt;&gt;, and | are different ways of redirecting output. command &gt; file redirects a commands output to a file. command &gt;&gt; file redirects a commands output to a file without overwriting the existing contents of the file. command_1 | command_2 redirects the output of the first command as input to the second command. 3.10 Writing Scripts and Working with Data Questions: How can we automate a commonly used set of commands? Objectives: Use the nano text editor to modify text files. Write a basic shell script. Use the bash command to execute a shell script. Use chmod to make a script an executable program. 3.11 Writing files Weve been able to do a lot of work with files that already exist, but what if we want to write our own files? Were not going to type in a FASTA file, but well see as we go through other tutorials, there are a lot of reasons well want to write a file, or edit an existing file. To add text to files, were going to use a text editor called Nano. Were going to create a file to take notes about what weve been doing with the data files. This is good practice when working in bioinformatics. We can create a file called README.txt that describes the data files in the directory or documents how the files in that directory were generated. As the name suggests, its a file that we or others should read to understand the information in that directory. Lets change our working directory to ~/MarineGenomicsData/Week2/untrimmed_fastq using cd, then run nano to create a file called README.txt: $ cd ~/MarineGenomicsData/Week2/untrimmed_fastq $ nano README.txt You should see something like this: The text at the bottom of the screen shows the keyboard shortcuts for performing various tasks in nano. We will talk more about how to interpret this information soon. Which Editor? Which Editor? When we say, nano is a text editor, we really do mean text: it can only work with plain character data, not tables, images, or any other human-friendly media. We use it in examples because it is one of the least complex text editors. However, because of this trait, it may not be powerful enough or flexible enough for the work you need to do after this workshop. On Unix systems (such as Linux and Mac OS X), many programmers use Emacs or Vim (both of which require more time to learn), or a graphical editor such as Gedit. On Windows, you may wish to use Notepad++. Windows also has a built-in editor called notepad that can be run from the command line in the same way as nano for the purposes of this lesson. No matter what editor you use, you will need to know where it searches for and saves files. If you start it from the shell, it will (probably) use your current working directory as its default location. Lets type in a few lines of text. Describe what the files in this directory are, what youve been doing with them, what date you created/edited them. Once were happy with our text, we can press Ctrl-O (press the Ctrl or Control key and, while holding it down, press the O key) to write our data to disk. Youll be asked what file we want to save this to: press Return to accept the suggested default of README.txt. Once our file is saved, we can use Ctrl-X to quit the editor and return to the shell. Control, Ctrl, or ^ Key The Control key is also called the Ctrl key. There are various ways in which using the Control key may be described. For example, you may see an instruction to exit as pressing the Ctrl key and the X key, described as any of: Control-X Control+X Ctrl-X Ctrl+X ^X C-x In nano, along the bottom of the screen youll see ^G Get Help ^O WriteOut. This means that you can use Ctrl-G to get help and Ctrl-O to save your file. Now youve written a file! You can take a look at it with less or cat, or open it up again and edit it with nano. Exercise Exercise Open README.txt and at the bottom add a song title from your ideal coding playlist and save the file. Solution Solution Use nano README.txt to open the file. Add your song and then use Ctrl-X followed by y and Enter to save. 3.12 Writing scripts A really powerful thing about the command line is that you can write scripts. Scripts let you save commands to run them and also lets you put multiple commands together. Though writing scripts may require an additional time investment initially, this can save you time as you run them repeatedly. Scripts can also address the challenge of reproducibility: if you need to repeat an analysis, you retain a record of your command history within the script. One thing we will commonly want to do with sequencing results is pull out bad reads and write them to a file to see if we can figure out whats going on with them. Were going to look for reads with long sequences of Ns like we did before, but now were going to write a script, so we can run it each time we get new sequences, rather than type the code in by hand each time. Were going to create a new file to put this command in. Well call it bad-reads-script.sh. The sh isnt required, but using that extension tells us that its a shell script. $ nano bad-reads-script.sh Bad reads have a lot of Ns, so were going to look for NNNNNNNNNN with grep. We want the whole FASTQ record, so were also going to get the one line above the sequence and the two lines below. We also want to look in all the files that end with .fastq, so were going to use the * wildcard. grep -B1 -A2 -h NNNNNNNNNN *.fastq | grep -v &#39;^--&#39; &gt; scripted_bad_reads.txt Custom grep control We introduced the -v option in the previous episode, now we are using -h to Suppress the prefixing of file names on output according to the documentation shown by man grep. Type your grep command into the file and save it as before. Be careful that you did not add the $ at the beginning of the line. Now comes the neat part. We can run this script. Type: $ bash bad-reads-script.sh It will look like nothing happened, but now if you look at scripted_bad_reads.txt, you can see that there are now reads in the file. Making the script into a program Exercise We had to type bash because we needed to tell the computer what program to use to run this script. Instead, we can turn this script into its own program. We need to tell it that its a program by making it executable. We can do this by changing the file permissions. We talked about permissions in an earlier episode. First, lets look at the current permissions. $ ls -l bad-reads-script.sh -rw-rw-r-- 1 exouser exouser 75 Apr 8 12:46 bad-reads-script.sh We see that it says -rw-r--r--. This shows that the file can be read by any user and written to by the file owner (you). We want to change these permissions so that the file can be executed as a program using ./ . We use the command chmod like we did earlier when we removed write permissions. Here we are adding (+) executable permissions (+x). $ chmod +x bad-reads-script.sh Now lets look at the permissions again. $ ls -l bad-reads-script.sh -rwxrwxr-x 1 exouser exouser 75 Apr 8 12:48 bad-reads-script.sh Now we see that it says -rwxr-xr-x. The xs that are there now tell us we can run it as a program. So, lets try it! Well need to put ./ at the beginning so the computer knows to look here in this directory for the program. $ ./bad-reads-script.sh The script should run the same way as before, but now weve created our very own computer program! 3.13 Computing magic with for loops Loops are key to productivity improvements through automation as they allow us to execute commands repeatedly. Similar to wildcards and tab completion, using loops also reduces the amount of typing (and typing mistakes). Loops are helpful when performing operations on groups of sequencing files, such as unzipping or trimming multiple files. We will use loops for these purposes in subsequent analyses. When the shell sees the keyword for, it knows to repeat a command (or group of commands) once for each item in a list. Each time the loop runs (called an iteration), an item in the list is assigned in sequence to the variable, and the commands inside the loop are executed, before moving on to the next item in the list. Inside the loop, we call for the variables value by putting $ in front of it. The $ tells the shell interpreter to treat the variable as a variable name and substitute its value in its place, rather than treat it as text or an external command. In shell programming, this is usually called expanding the variable. Lets write a for loop to show us the first two lines of the fastq files we downloaded earlier. You will notice the shell prompt changes from $ to &gt; and back again as we were typing in our loop. The second prompt, &gt;, is different to remind us that we havent finished typing a complete command yet. A semicolon, ;, can be used to separate two commands written on a single line. $ cd ~/data_week2/Week2/data_week2/untrimmed_fastq $ for filename in *.fastq do head -n 2 ${filename} done The for loop begins with the formula for &lt;variable&gt; in &lt;group to iterate over&gt;. In this case, the word filename is designated as the variable to be used over each iteration. In our case each fastq file will be sequentially substituted for filename because they fit the pattern of ending with .fastq in the directory weve specified. The next line of the for loop is do. The next line is the code that we want to execute. We are telling the loop to print the first two lines of each variable we iterate over. Finally, the word done ends the loop. After executing the loop, you should see the first two lines of both fastq files printed to the terminal. Lets create a loop that will save this information to a file. $ for filename in *.fastq do head -n 2 ${filename} &gt;&gt; seq_info.txt done When writing a loop, you will not be able to return to previous lines once you have pressed Enter. Remember that we can cancel the current command using Ctrl+C if you notice a mistake that is going to prevent your loop for executing correctly. Note that we are using &gt;&gt; to append the text to our seq_info.txt file. If we used &gt;, the seq_info.txt file would be rewritten every time the loop iterates, so it would only have text from the last variable used. Instead, &gt;&gt; adds to the end of the file. 3.14 Using Basename in for loops Basename is a function in UNIX that is helpful for removing a uniform part of a name from a list of files. In this case, we will use basename to remove the .fastq extension from the files that weve been working with. $ basename SRR097977.fastq .fastq We see that this returns just the SRR accession, and no longer has the .fastq file extension on it. SRR097977 If we try the same thing but use .fasta as the file extension instead, nothing happens. This is because basename only works when it exactly matches a string in the file. $ basename SRR097977.fastq .fasta SRR097977.fastq Basename is really powerful when used in a for loop. It allows to access just the file prefix, which you can use to name things. Lets try this. Inside our for loop, we create a new name variable. We call the basename function inside the parenthesis, then give our variable name from the for loop, in this case ${filename}, and finally state that .fastq should be removed from the file name. Its important to note that were not changing the actual files, were creating a new variable called name. The line &gt; echo $name will print to the terminal the variable name each time the for loop runs. Because we are iterating over two files, we expect to see two lines of output. $ for filename in *.fastq do name=$(basename ${filename} .fastq) echo ${name} done Exercise Exercise Print the file prefix of all of the .txt files in our current directory. Solution Solution $ for filename in *.txt do name=$(basename ${filename} .txt) echo ${name} done One way this is really useful is to move files. Lets rename all of our .txt files using mv so that they have the years on them, which will document when we created them. $ for filename in *.txt &gt; do &gt; name=$(basename ${filename} .txt) &gt; mv ${filename} ${name}_2019.txt &gt; done Exercise Exercise Remove _2019 from all of the .txt files. Solution Solution $ for filename in *_2019.txt do name=$(basename ${filename} _2019.txt) mv ${filename} ${name}.txt done "],["week-3--what-is-a-genetic-variant.html", "4 Week 3- What is a Genetic Variant? 4.1 To get started lets dowload the data and install a few programs 4.2 Raw read quality control 4.3 Trimming to remove adapters 4.4 Building an index of our genome 4.5 Map reads to the genome 4.6 sam to bam file conversion 4.7 Genotype likelihoods", " 4 Week 3- What is a Genetic Variant? Youll find the lecture discussing the definition and identification of genetic variation here 4.1 To get started lets dowload the data and install a few programs Download the data from the MarineGenomicsData repository on git hub. Well be working in the Week_3 folder wget https://raw.githubusercontent.com/BayLab/MarineGenomicsData/main/week3_quarter.tar.gz # uncompress the file tar -xvzf week3_quarter.tar.gz Next we need to install a few programs that will allow us to do what we need to do. This will all take a few minutes! *The programs that we are installing + samtools: allows us to filter and view our mapped data + bowtie2: to map our reads to the reference genome + cutadapt: will trim adaptor sequences from the reads + fastqc: used to view the quality of the read files sudo apt-get -y update &amp;&amp; \\ sudo apt-get -y install samtools bowtie2 cutadapt fastqc And one more program that well install separately. This is angsd which we will use to find variants in our data. The first command navigates you to your home directory. cd sudo apt install liblzma-dev sudo apt install libbz2-dev sudo apt-get install libcurl4-nss-dev git clone https://github.com/ANGSD/angsd.git git clone --recursive https://github.com/samtools/htslib.git cd angsd make CRYPTOLIB=&quot;&quot; Now were ready to get going. The first thing well do is have a look at our data and directories to make sure we know where everything is. $ ls Youll see that when we uncompressed our data file, it created a directory called week4, when we are in week3. Use the mv command to rename the directory to week3. Change directories to MarineGenomics/week3. If you ls into this directory you should see 6 files with a .fastq.gz extension and 1 tiny genome file with a .fna.gz extension. 4.2 Raw read quality control Now we are ready to start working with our data! Lets use the program fastqc to check the quality of our data files $ fastqc SRR6805880.tiny.fastq.gz Readout will say: Started analysis for SRR6805880.tiny.fastq.gz Analysis complete for SRR6805880.tiny.fastq.gz Lets look to see that it worked $ ls Ppar_tinygenome.fna.gz SRR6805880.tiny_fastqc.zip SRR6805883.tiny.fastq.gz SRR6805880.tiny.fastq.gz SRR6805881.tiny.fastq.gz SRR6805884.tiny.fastq.gz SRR6805880.tiny_fastqc.html SRR6805882.tiny.fastq.gz SRR6805885.tiny.fastq.gz Looks good! Fastqc generated two outputs for us, a .html and a .zip directory Lets run fastqc on the remaining files, and then well take a look at the output. You may have noticed fastqc just used the same file name to produce our output with different extensions. We can take advantage of that by running fastqc on all our datafiles with the wildcard *. $ fastqc SRR680588* Youll see you initially get an error message because fastqc doesnt see the .fastq file extension on some of our files. It simply skips these and moves on the the next file. To view the output of fastqc, well minimize our terminal and look at our Home folder on our jetstream desktop. This is the same home directory that weve been working in through the terminal. Go to the directory where you were running fastqc and find an .html file. Double click it and it should open a web browser with the output data. Well go over how to interpret this file in class. 4.3 Trimming to remove adapters There are many programs to trim sequence files. Well use the same paper that was used in the Xuereb et al. 2018 paper. Cutadapt is relatively easy to run with the code below, requiring we supply the adapter sequence, input file name, and output file name. $ cutadapt -g SEQUENCETOTRIM -o name_of_input_file name_of_output_file Lets do this on one of our files to test it out. cutadapt -g TGCAG SRR6805880.tiny.fastq.gz -o SRR6805880.tiny_trimmed.fastq.gz This works for a single file, but if we want to do it for all our read files we need to either do them all individually (slow and error prone) or use the fancy for loops we just learned! for filename in *.tiny.fastq.gz do base=$(basename $filename .tiny.fastq.gz) echo ${base} cutadapt -g TGCAG ${base}.tiny.fastq.gz -o ${base}.tiny_trimmed.fastq.gz done You should see a little report for each of these files that showing how many reads were trimmed and some other info (how long are the reads, etc) You can check if the trimmed files are there with: ls *trimmed* Our reads are now ready to be mapped to the genome. 4.4 Building an index of our genome First we have to index our genome. Well do that with the bowtie2-build command. This will generate a lot of files that describe different aspects of our genome We give bowtie2-build two things, the name of our genome, and a general name to label the output files. I always keep the name of the output files the same as the original genome file (without the .fna.gz extension) to avoid confusion. bowtie2-build Ppar_tinygenome.fna.gz Ppar_tinygenome This should produce several output files with extensions including: .bt2 and rev.1.bt2 etc (six files in total) Exercise Run fastqc on our .trimmed reads and compare the html with the untrimmed files. Solution fastqc *trimmed.fastq.gz We should no longer see the red error flag for the per base sequence quality or base pairs conten. 4.5 Map reads to the genome Now we will need to map our reads onto the reference genome, so we can compare their sequences and call genetic variants. Here you would look at the bowtie manual to find the mapping code and its parameters. Weve already done this, and found that we need to run the bowtie2command with the parameters -x for reference, -U for reads, and -S for name of output sam file. Lets map those reads using a for loop for filename in *.tiny_trimmed.fastq.gz do base=$(basename $filename .tiny_trimmed.fastq.gz) echo ${base} bowtie2 -x Ppar_tinygenome -U ${base}.tiny_trimmed.fastq.gz -S ${base}.trim.sam done You should see a bunch of text telling you all about how well our reads mapped to the genome. For this example were getting a low percentage (20-30%) because of how the genome and reads were subset for this exercise. The full genome and full read files have a much higher mapping rate (70-80%) than our subset. Youll also notice that we have made a bunch of .sam files. This stands for Sequence Alignment Map file. Lets use less to look at one of these files. Exercise Map the untrimmed files to the genome. How do the alignments compare? Solution As a for loop: for filename in *tiny.fastq.gz; do base=$(basename $filename .tiny.fastq.gz) echo=${base} bowtie2 -x Ppar_tinygenome -U ${base}.tiny.fastq.gz -S ${base}.nottrimmed.sam done Exercise Run the mapping for loop as a shell script using bash (i.e., store the for loop in a text editor (NANOs or other) and execute the .sh script with bash) Solution This can be done by copying and pasting the for loop in a text editor that you save as for example map_samples_bowtie2.sh. This script is then executed by bash map_samples_bowtie2.sh 4.6 sam to bam file conversion The next step is to convert our sam file to a bam (Binary Alignment Map file). This gets our file ready to be read by angsd, the program were going to use to call SNPs. Try googling the parameters of the samtools view command to understand what is done with -bhS. In the second half of the pipe, we are sorting our sam files and converting to a .bam output, with -o indicating the name of the output file(s). for filename in *.trim.sam do base=$(basename $filename .trim.sam) echo ${base} samtools view -bhS ${base}.trim.sam | samtools sort -o ${base}.bam done 4.7 Genotype likelihoods There are many ways and many programs that call genotypes. The program that we will use calculates genotype likelihoods, which account for uncertainty due to sequencing errors and/or mapping errors and is one of several programs in the package ANGSD. The purpose of this class is not to discuss which program is the best, but to teach you to use some commonly used programs. angsd needs a text file with the .bam file names listed. We can make that by running the command below ls *.bam &gt; bam.filelist Look at the list: cat bam.filelist Run the following code to calculate genotype likelihoods ../../angsd/angsd -bam bam.filelist -GL 1 -out genotype_likelihoods -doMaf 2 -SNP_pval 1e-2 -doMajorMinor 1 This will generate two files, one with a .arg extension, this has a record of the script we ran to generate the output, and a .maf file that will give you the minor allele frequencies and is the main output file. If you see these two files, Yay!! We did it! Exercise Change the parameters of the angsd genotype likelihoods command. How many more/less SNPs do we recover if we lower or raise the SNP p-value? To see what the other parameters do run `../../angsd/angsd -h Solution If we remove the -SNP_pval command entirely we get ~68000 sites retained! Wow! That seems like a lot given our ~20% maping rate. If you instead increase the p-value threshold to 1e-3 we find 0 SNPs. Additional Exercises A possible answer is located beneath each activities, but its possible you will correctly perform the suggestion in a different way. Use cutadapt to trim the sequences to 70 bp like they did in the Xuereb et al. 2018 paper. Write the output of cutadapt to an .70bp.trimmed.fastq.gz and then map these 70bp, trimmed reads to the genome. How do they compare to our .trimmed reads? Solution To find the parameter for maximum read length in cutadapt: cutadapt - help cutadapt -g TGCAG ${base}.tiny.fastq.gz -u 70 -o ${base}.tiny_70bp_trimmed.fastq.gz for filename in *tiny_70bp_trimmed.fastq.gz do base=$(basename $filename .tiny_70bp_trimmed.fastq.gz) echo=${base} bowtie2 -x Ppar_tinygenome -U ${base}.tiny_70bp_trimmed.fastq.gz -S ${base}.70bp_trimmed.sam done For this lesson we ran everything in the same directory and you can see that we generated quite a few files by the time we were done. Many population genomic studies have data for hundreds of individuals and running everything in the same directory gets confusing and messy. However, having the data in a different directory from the output complicates running things a little (you have to remember which directory youre in). Make a new directory called raw_data and mv the raw data files (those that end in fastq.gz, and the tinygenome) into it. Then mv everything that we generated into a folder called old_outputs. Now rerun our code making a directory for the trimmed_reads and sam_bam files each. Solution The commands you will run include: To make a new directory and move the raw data: mkdir raw_data; mv *fastq.gz raw_data To move all the old output that we generated: mv * old_outputs Then make output folder for each step in the process: mkdir trimmed_reads; mkdir sam_bam Then rerun the for loops but change the file path for the input and output data. For example the cutadapt command can be done with a loop as shown below. for filename in raw_data/*.tiny.fastq.gz do base=$(basename $filename .tiny.fastq.gz) echo=${base} cutadapt -g TGCAG raw_data/${base}.tiny.fastq.gz -o trimmed_reads/${base}.tiny_trimmed.fastq.gz done You can see weve added the file name raw_data everytime were calling the read files (at the beginning of the for loop and withing the cutadapt program). And we specify to put our trimmed reads in the trimmed_reads folder. To see if theyre there run: ls trimmed_reads. Much more organized! "],["week-4---the-r-environment.html", "5 Week 4 - The R environment 5.1 Create a project in Rstudio 5.2 Orientation to R 5.3 Manipulating a vector object 5.4 Characterizing a dataframe 5.5 How to access parts of the data 5.6 Data Manipulation 5.7 Practice exploring a dataframe EXERCISE 1.1 5.8 Subsetting datasets &amp; logicals 5.9 Practice Subsetting datasets/logicals EXERCISE 1.2 indexing by logical statements 5.10 A few tips for coding in Rstudio", " 5 Week 4 - The R environment This lesson is modified from materials of the STEMinist_R lessons produced by several UC Davis graduate student and which can be found here. We have made some modifications to the data carpentry tutorial to fit our course. Make a new directory for week4 on the MarineGenomics directory mkdir MarineGenomics/week4 Download the data from the MarineGenomics repository on git hub via wget in the terminal with the following links: (first we will naviagte to the week4 directory) cd MarineGenomics/week4 wget https://github.com/BayLab/MarineGenomics2022/blob/d15bf09fbba443c96a6e3a05e5a361a03de4a5c7/data/Week4/Exercise_1.1_Dataframes.R wget https://github.com/BayLab/MarineGenomics2022/blob/d15bf09fbba443c96a6e3a05e5a361a03de4a5c7/data/Week4/Exercise_1.2_Subsetting.R You can now open Rstudio by searching for Rstudio in Applications. When we first open Rstudio, it has 3 parts: the window to the left (console/terminal/jobs), and two windows to the right (environment/history/connections/tutorial and files/plots/packages/help/viewer). When we open a script, a fourth window will appear. We can change the location and size of these windows as we please, and we will get used to using them when we code in Rstudio. Before we begin coding, for good practice, lets start by creating a Project. Working in a project allows us to save all our scripts in the same place, and to automatically have access to the files we are working with without repeatedly specifying paths. This will be especially important once you start working on multiple projects at a time. 5.1 Create a project in Rstudio Go to File and select New Project. You will then see this: Select Existing Directory. Then, select browse: (this may take a minute) Select the Marine Genomics directory and then select week4: Click Open, and then Create Project. You have now created a project (week4.Rproj) that is located together with the other files that we will be working with. There are a few types of files we can work with in Rstudio. The most basic file is an *.R file, which contains simple code. We will orientate ourselves with Rstudio using such a file. 5.2 Orientation to R When we work in R, we document our work using a script (for example, an R file). We can open a new R file by selecting File &gt; New File &gt; R Script, which generates a simple text file. Its very important to add comments to our code, that explain the commands that we are using, by using the # sign - anything that follows a # is not code! Commenting on code is very important! It explains to someone else what your code does, and can even be useful when you revisit your own code after a few weeks/months/years. Be nice to your future self, comment your code. We can use this script to copy (from the website) the commands we use and paste them (onto the R file). R can be used for basic arithmetic: 5+10+23 ## [1] 38 The number in the brackets is the line the number. It can also store values in objects. There are five different types of objects in R: vector, list, matrix, data frame and array. (image taken from this website) You can assign values to an object using an assignment operator &lt;- or =. Notice that once youve created an object, it will appear in the Environment section in the window on the upper right. number &lt;- 10 numbers &lt;- c(10, 11, 12, 14, 16) You can see your assigned object by typing the name you gave it. number ## [1] 10 numbers ## [1] 10 11 12 14 16 Objects can be numbers or characters: cat &lt;- &quot;meow&quot; dog &lt;- &quot;woof&quot; We can use colons to get sequences of numbers: n &lt;- 1:100 Vectors can also include characters (in quotes): c()=concatenate, aka link things together! animals &lt;- c(&quot;woof&quot;, &quot;meow&quot;, &quot;hiss&quot;, &quot;baa&quot;) 5.3 Manipulating a vector object We can get summaries of vectors with summary() summary(n) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.00 25.75 50.50 50.50 75.25 100.00 We can see how long a vector is with length() length(n) ## [1] 100 You can use square brackets [] to get parts of vectors. For example, the third part of the animals vector we created: animals[3] ## [1] &quot;hiss&quot; 5.4 Characterizing a dataframe Well now move from working with objects and vectors to working with dataframes: Here are a few useful functions: install.packages() library() data() str() dim() colnames() and rownames() class() as.factor() as.numeric() unique() t() max(), min(), mean() and summary() Were going to use data on sleep patterns in mammals. This requires installing a package (ggplot2) and loading the data Install the package ggplot2. This only has to be done once and after installation we should then comment out the command to install the package with a #. #install.packages(&quot;ggplot2&quot;) #load the package library (ggplot2) Load the data (its called msleep). data(&quot;msleep&quot;) There are many functions in R that allow us to get an idea of what the data looks like. For example, what are its dimensions (how many rows and columns)? # head() -look at the beginning of the data file # tail() -look at the end of the data file head(msleep) ## # A tibble: 6 x 11 ## name genus vore order conservation sleep_total sleep_rem sleep_cycle awake ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Cheetah Acin~ carni Carn~ lc 12.1 NA NA 11.9 ## 2 Owl mo~ Aotus omni Prim~ &lt;NA&gt; 17 1.8 NA 7 ## 3 Mounta~ Aplo~ herbi Rode~ nt 14.4 2.4 NA 9.6 ## 4 Greate~ Blar~ omni Sori~ lc 14.9 2.3 0.133 9.1 ## 5 Cow Bos herbi Arti~ domesticated 4 0.7 0.667 20 ## 6 Three-~ Brad~ herbi Pilo~ &lt;NA&gt; 14.4 2.2 0.767 9.6 ## # ... with 2 more variables: brainwt &lt;dbl&gt;, bodywt &lt;dbl&gt; tail(msleep) ## # A tibble: 6 x 11 ## name genus vore order conservation sleep_total sleep_rem sleep_cycle awake ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Tenrec Tenr~ omni Afro~ &lt;NA&gt; 15.6 2.3 NA 8.4 ## 2 Tree s~ Tupa~ omni Scan~ &lt;NA&gt; 8.9 2.6 0.233 15.1 ## 3 Bottle~ Turs~ carni Ceta~ &lt;NA&gt; 5.2 NA NA 18.8 ## 4 Genet Gene~ carni Carn~ &lt;NA&gt; 6.3 1.3 NA 17.7 ## 5 Arctic~ Vulp~ carni Carn~ &lt;NA&gt; 12.5 NA NA 11.5 ## 6 Red fox Vulp~ carni Carn~ &lt;NA&gt; 9.8 2.4 0.35 14.2 ## # ... with 2 more variables: brainwt &lt;dbl&gt;, bodywt &lt;dbl&gt; # str() str(msleep) ## tibble [83 x 11] (S3: tbl_df/tbl/data.frame) ## $ name : chr [1:83] &quot;Cheetah&quot; &quot;Owl monkey&quot; &quot;Mountain beaver&quot; &quot;Greater short-tailed shrew&quot; ... ## $ genus : chr [1:83] &quot;Acinonyx&quot; &quot;Aotus&quot; &quot;Aplodontia&quot; &quot;Blarina&quot; ... ## $ vore : chr [1:83] &quot;carni&quot; &quot;omni&quot; &quot;herbi&quot; &quot;omni&quot; ... ## $ order : chr [1:83] &quot;Carnivora&quot; &quot;Primates&quot; &quot;Rodentia&quot; &quot;Soricomorpha&quot; ... ## $ conservation: chr [1:83] &quot;lc&quot; NA &quot;nt&quot; &quot;lc&quot; ... ## $ sleep_total : num [1:83] 12.1 17 14.4 14.9 4 14.4 8.7 7 10.1 3 ... ## $ sleep_rem : num [1:83] NA 1.8 2.4 2.3 0.7 2.2 1.4 NA 2.9 NA ... ## $ sleep_cycle : num [1:83] NA NA NA 0.133 0.667 ... ## $ awake : num [1:83] 11.9 7 9.6 9.1 20 9.6 15.3 17 13.9 21 ... ## $ brainwt : num [1:83] NA 0.0155 NA 0.00029 0.423 NA NA NA 0.07 0.0982 ... ## $ bodywt : num [1:83] 50 0.48 1.35 0.019 600 ... dim(), ncol(), nrow()- dimensions, number of columns, number of rows colnames(), rownames() - column names, row names Its important to know the class of data if you want to work with it. msleep contains several different types of data. Some common classes are: factors, numeric, integers, characters, logical # class() class(msleep) ## [1] &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; Rstudio also allows us to just look into the data file with View(). We can also click on our dataframe in the Environment. View(msleep) 5.5 How to access parts of the data We can also look at a single column at a time. There are three ways to access this: $, [,#] or [,a]. Quick Tip: Think about rc cola or remote control car to remember that [5,] means fifth row and [,5] means fifth column! Each way has its own advantages: msleep[,3] ## # A tibble: 83 x 1 ## vore ## &lt;chr&gt; ## 1 carni ## 2 omni ## 3 herbi ## 4 omni ## 5 herbi ## 6 herbi ## 7 carni ## 8 &lt;NA&gt; ## 9 carni ## 10 herbi ## # ... with 73 more rows msleep[, &quot;vore&quot;] ## # A tibble: 83 x 1 ## vore ## &lt;chr&gt; ## 1 carni ## 2 omni ## 3 herbi ## 4 omni ## 5 herbi ## 6 herbi ## 7 carni ## 8 &lt;NA&gt; ## 9 carni ## 10 herbi ## # ... with 73 more rows msleep$vore ## [1] &quot;carni&quot; &quot;omni&quot; &quot;herbi&quot; &quot;omni&quot; &quot;herbi&quot; &quot;herbi&quot; &quot;carni&quot; ## [8] NA &quot;carni&quot; &quot;herbi&quot; &quot;herbi&quot; &quot;herbi&quot; &quot;omni&quot; &quot;herbi&quot; ## [15] &quot;omni&quot; &quot;omni&quot; &quot;omni&quot; &quot;carni&quot; &quot;herbi&quot; &quot;omni&quot; &quot;herbi&quot; ## [22] &quot;insecti&quot; &quot;herbi&quot; &quot;herbi&quot; &quot;omni&quot; &quot;omni&quot; &quot;herbi&quot; &quot;carni&quot; ## [29] &quot;omni&quot; &quot;herbi&quot; &quot;carni&quot; &quot;carni&quot; &quot;herbi&quot; &quot;omni&quot; &quot;herbi&quot; ## [36] &quot;herbi&quot; &quot;carni&quot; &quot;omni&quot; &quot;herbi&quot; &quot;herbi&quot; &quot;herbi&quot; &quot;herbi&quot; ## [43] &quot;insecti&quot; &quot;herbi&quot; &quot;carni&quot; &quot;herbi&quot; &quot;carni&quot; &quot;herbi&quot; &quot;herbi&quot; ## [50] &quot;omni&quot; &quot;carni&quot; &quot;carni&quot; &quot;carni&quot; &quot;omni&quot; NA &quot;omni&quot; ## [57] NA NA &quot;carni&quot; &quot;carni&quot; &quot;herbi&quot; &quot;insecti&quot; NA ## [64] &quot;herbi&quot; &quot;omni&quot; &quot;omni&quot; &quot;insecti&quot; &quot;herbi&quot; NA &quot;herbi&quot; ## [71] &quot;herbi&quot; &quot;herbi&quot; NA &quot;omni&quot; &quot;insecti&quot; &quot;herbi&quot; &quot;herbi&quot; ## [78] &quot;omni&quot; &quot;omni&quot; &quot;carni&quot; &quot;carni&quot; &quot;carni&quot; &quot;carni&quot; Sometimes it is useful to know what class() the column is: class(msleep$vore) ## [1] &quot;character&quot; class(msleep$sleep_total) ## [1] &quot;numeric&quot; We can also look at a single row at a time. There are two ways to access this: 1. by indicating the row number in square brackets next to the name of the dataframe name[#,] and by calling the actual name of the row (if your rows have names) name[\"a\",]. msleep[3,] ## # A tibble: 1 x 11 ## name genus vore order conservation sleep_total sleep_rem sleep_cycle awake ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Mounta~ Aplo~ herbi Rode~ nt 14.4 2.4 NA 9.6 ## # ... with 2 more variables: brainwt &lt;dbl&gt;, bodywt &lt;dbl&gt; msleep[msleep$name == &quot;Mountain beaver&quot;,] ## # A tibble: 1 x 11 ## name genus vore order conservation sleep_total sleep_rem sleep_cycle awake ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Mounta~ Aplo~ herbi Rode~ nt 14.4 2.4 NA 9.6 ## # ... with 2 more variables: brainwt &lt;dbl&gt;, bodywt &lt;dbl&gt; We can select more than one row or column at a time: # see two columns msleep[,c(1, 6)] ## # A tibble: 83 x 2 ## name sleep_total ## &lt;chr&gt; &lt;dbl&gt; ## 1 Cheetah 12.1 ## 2 Owl monkey 17 ## 3 Mountain beaver 14.4 ## 4 Greater short-tailed shrew 14.9 ## 5 Cow 4 ## 6 Three-toed sloth 14.4 ## 7 Northern fur seal 8.7 ## 8 Vesper mouse 7 ## 9 Dog 10.1 ## 10 Roe deer 3 ## # ... with 73 more rows # and make a new data frame from these subsets subsleep &lt;- msleep[,c(1, 6)] But what if we actually care about how many unique things are in a column? # unique() unique(msleep[, &quot;order&quot;]) ## # A tibble: 19 x 1 ## order ## &lt;chr&gt; ## 1 Carnivora ## 2 Primates ## 3 Rodentia ## 4 Soricomorpha ## 5 Artiodactyla ## 6 Pilosa ## 7 Cingulata ## 8 Hyracoidea ## 9 Didelphimorphia ## 10 Proboscidea ## 11 Chiroptera ## 12 Perissodactyla ## 13 Erinaceomorpha ## 14 Cetacea ## 15 Lagomorpha ## 16 Diprotodontia ## 17 Monotremata ## 18 Afrosoricida ## 19 Scandentia # table() table(msleep$order) ## ## Afrosoricida Artiodactyla Carnivora Cetacea Chiroptera ## 1 6 12 3 2 ## Cingulata Didelphimorphia Diprotodontia Erinaceomorpha Hyracoidea ## 2 2 2 2 3 ## Lagomorpha Monotremata Perissodactyla Pilosa Primates ## 1 1 3 1 12 ## Proboscidea Rodentia Scandentia Soricomorpha ## 2 22 1 5 # levels(), if class is factor (and if not, we can make it a factor by using &#39;as.factor&#39;) levels(as.factor(msleep$order)) ## [1] &quot;Afrosoricida&quot; &quot;Artiodactyla&quot; &quot;Carnivora&quot; &quot;Cetacea&quot; ## [5] &quot;Chiroptera&quot; &quot;Cingulata&quot; &quot;Didelphimorphia&quot; &quot;Diprotodontia&quot; ## [9] &quot;Erinaceomorpha&quot; &quot;Hyracoidea&quot; &quot;Lagomorpha&quot; &quot;Monotremata&quot; ## [13] &quot;Perissodactyla&quot; &quot;Pilosa&quot; &quot;Primates&quot; &quot;Proboscidea&quot; ## [17] &quot;Rodentia&quot; &quot;Scandentia&quot; &quot;Soricomorpha&quot; 5.6 Data Manipulation If your data is transposed in a way that isnt useful to you, you can switch it: (Note that this often changes the class of each column! In R, each column must have the same type of data) # t() tr_msleep&lt;-t(msleep) str(tr_msleep) ## chr [1:11, 1:83] &quot;Cheetah&quot; &quot;Acinonyx&quot; &quot;carni&quot; &quot;Carnivora&quot; &quot;lc&quot; &quot;12.1&quot; NA ... ## - attr(*, &quot;dimnames&quot;)=List of 2 ## ..$ : chr [1:11] &quot;name&quot; &quot;genus&quot; &quot;vore&quot; &quot;order&quot; ... ## ..$ : NULL Often we want to summarize data. There are many ways of doing this in R: # calculate mean() of a column mean(msleep$sleep_total) ## [1] 10.43373 # max() max(msleep$sleep_total) ## [1] 19.9 # min() min(msleep$sleep_total) ## [1] 1.9 # summary() summary(msleep$sleep_total) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.90 7.85 10.10 10.43 13.75 19.90 Sometimes, the values we care about arent provided in a data set. When this happens, we can create a new column that contains the values were interested in: Note: we use the $ sign to create a new column on the left part of the command, and to specify the column on the right side of the command # what if what we cared about was our sleep_total/sleep_rem ratio? # add a sleep_total/sleep_rem ratio column to our msleep dataframe with $ msleep$total_rem &lt;- msleep$sleep_total/msleep$sleep_rem # look at our dataframe again. It now contains 12 columns, one of them being the one we just created. View(msleep) 5.7 Practice exploring a dataframe EXERCISE 1.1 Reminder of those useful commands: dataframename[row , col], str(), dim(), nrow(), unique(), length(), rownames(), summary(), min(), max(), mean(), range(), levels(), factor(), as.factor(), class(), ncol(), nrow(), table(), sum(), quantile(), var() Well use the built-in iris dataset. the command: data(iris) # this loads the iris dataset. You can view more information about this dataset with help(iris) or ?iris How many rows are in the dataset? Solution data(iris) nrow(iris) ## [1] 150 What are three distinct ways to figure this out? Solution #nrows #str #dim How many species of flowers are in the dataset? Solution levels(iris$Species) ## [1] &quot;setosa&quot; &quot;versicolor&quot; &quot;virginica&quot; What class is iris? Solution class(iris) ## [1] &quot;data.frame&quot; How many columns does this data frame have? What are their names? Solution colnames(iris) ## [1] &quot;Sepal.Length&quot; &quot;Sepal.Width&quot; &quot;Petal.Length&quot; &quot;Petal.Width&quot; &quot;Species&quot; What class did R assign to each column? Solution str(iris) ## &#39;data.frame&#39;: 150 obs. of 5 variables: ## $ Sepal.Length: num 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ... ## $ Sepal.Width : num 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ... ## $ Petal.Length: num 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ... ## $ Petal.Width : num 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ... ## $ Species : Factor w/ 3 levels &quot;setosa&quot;,&quot;versicolor&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... Assign the first flowers petals width and length to new objects called setosa1.petalwidth and setosa1.petallength Solution setosa1.petalwidth&lt;-iris[1,2] setosa1.petallength&lt;-iris[1,3] Calculate the approximate area of the petal of the first flower, setosa1 (assume petal area can be approximated by a rectangle). Solution #using our premade objects setosa1area2&lt;-setosa1.petalwidth*setosa1.petallength Calculate the petal area of each flower in the iris dataset and assign this to a new column named PetalArea. Solution iris$PetalArea&lt;-iris$Petal.Length*iris$Petal.Width What is the maximum sepal length of the irises? Solution max(iris$Sepal.Length) ## [1] 7.9 What is the average sepal length among all flowers in the dataset? Solution mean(iris$Sepal.Length) ## [1] 5.843333 How about the minimum and median sepal length? Solution min(iris$Sepal.Length) ## [1] 4.3 median(iris$Sepal.Length) ## [1] 5.8 5.8 Subsetting datasets &amp; logicals A few useful commands: equals ==, does not equal !=, greater than &gt;, less than &lt;, and &amp;, and a pipe which can also indicate and |. Reminder there are two assignment operators in R &lt;- and a single equals sign =. The one you use really depends on how you learned to use R, and they are otherwise equivalent. Logical conditions vs. assignment operators: Logical values of TRUE (also T) and FALSE (also F) are special in R. What class is a logical value? TRUE ## [1] TRUE FALSE ## [1] FALSE # what class is a logical value? class(TRUE) ## [1] &quot;logical&quot; Logicals will be the output of various tests: 1 == 1 ## [1] TRUE 1 == 2 ## [1] FALSE # does not equal 1 != 1 ## [1] FALSE 1 != 2 ## [1] TRUE # greater than 1 &gt; 1 ## [1] FALSE 1 &gt;= 1 ## [1] TRUE # less than 1 &lt; 3 ## [1] TRUE # combining logical conditions with and (&amp;), or(|) 1 == 1 &amp; 2 == 2 ## [1] TRUE 1 == 1 &amp; 1 == 2 ## [1] FALSE 1 == 1 | 1 == 2 ## [1] TRUE # we can take the opposite of a logical by using ! !TRUE ## [1] FALSE This is very useful because we can use logicals to query a data frame or vector. # Which numbers in 1:10 are greater than 3? 1:10 &gt; 3 ## [1] FALSE FALSE FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE # How many numbers in 1:10 are greater than 3? sum(1:10 &gt; 3) ## [1] 7 # in our msleep data frame, which species have total sleep greater than 18 hours? # reload the msleep data with library(ggplot2) and data(msleep) if you need to msleep[,&quot;sleep_total&quot;]&gt;18 ## sleep_totalsing which() to identify which rows match the logical values (TRUE) and length to count how many species there are which(msleep[,&quot;sleep_total&quot;]&gt;18) #22 37 43 62 --&gt; the rows that contain organisms that sleep more than 18 hrs ## [1] 22 37 43 62 length(which(msleep[,&quot;sleep_total&quot;]&gt;18)) #4 --&gt; number of species that sleep more than 18 hrs ## [1] 4 # which four species are these? msleep[which(msleep[,&quot;sleep_total&quot;]&gt;18),] ## # A tibble: 4 x 12 ## name genus vore order conservation sleep_total sleep_rem sleep_cycle awake ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Big br~ Epte~ inse~ Chir~ lc 19.7 3.9 0.117 4.3 ## 2 Thick-~ Lutr~ carni Dide~ lc 19.4 6.6 NA 4.6 ## 3 Little~ Myot~ inse~ Chir~ &lt;NA&gt; 19.9 2 0.2 4.1 ## 4 Giant ~ Prio~ inse~ Cing~ en 18.1 6.1 NA 5.9 ## # ... with 3 more variables: brainwt &lt;dbl&gt;, bodywt &lt;dbl&gt;, total_rem &lt;dbl&gt; # what if we only want to see the bats that sleep more than 18 hours per 24 hour period? msleep[which(msleep[,&quot;sleep_total&quot;]&gt;18 &amp; msleep[,&quot;order&quot;] == &quot;Chiroptera&quot;),] ## # A tibble: 2 x 12 ## name genus vore order conservation sleep_total sleep_rem sleep_cycle awake ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Big br~ Epte~ inse~ Chir~ lc 19.7 3.9 0.117 4.3 ## 2 Little~ Myot~ inse~ Chir~ &lt;NA&gt; 19.9 2 0.2 4.1 ## # ... with 3 more variables: brainwt &lt;dbl&gt;, bodywt &lt;dbl&gt;, total_rem &lt;dbl&gt; 5.9 Practice Subsetting datasets/logicals EXERCISE 1.2 indexing by logical statements A few useful commands: ==, !=, &gt;, &lt;, &amp;, |, sum(), which(), table(), ! Create your own logical vector with three TRUEs and three FALSEs Solution a = c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE) a ## let&#39;s print to screen and make sure it is stored in this variable ## [1] TRUE TRUE FALSE FALSE TRUE FALSE Produce a vector of the index number of the TRUE values Solution which(a) ## which gives you the index of TRUE values automatically ## [1] 1 2 5 which(a == TRUE) ## but sometimes it&#39;s reassuring to state exactly what you&#39;re doing ## [1] 1 2 5 Produce a second vector which indexes the numbers of the falses Solution which(!a) ## [1] 3 4 6 which(a == FALSE) ## [1] 3 4 6 Go back to the iris dataset, which can be loaded with data(iris) How many irises have sepals less than 5.5 cm? Solution data(iris) ## this reloads the data set in case you&#39;ve closed R since using iris sum(iris[,&#39;Sepal.Length&#39;]&lt;5.5) ## remember TRUE&#39;s are 1 and FALSE&#39;s are 0 ## [1] 52 length(which(iris[,&#39;Sepal.Length&#39;]&lt;5.5)) ## here, which() will only return the index of TRUE values, so we&#39;re counting how many there are ## [1] 52 Which iris individual has the largest petal length? What is the width of its petal? Solution max(iris[,&#39;Petal.Length&#39;]) ## this gives us the length of the longest petal ## [1] 6.9 which(iris[,&#39;Petal.Length&#39;] == max(iris[,&#39;Petal.Length&#39;])) ## this gives us the index of the individual with the longest petal ## [1] 119 iris[,&#39;Petal.Width&#39;][which(iris[,&#39;Petal.Length&#39;] == max(iris[,&#39;Petal.Length&#39;]))] ## now we&#39;re subsetting the Petal.Width column by the index of the individual with the longest petal ## [1] 2.3 ## another way to do this would be to use the index of the individual with the longest petal to pick rows, and the Petal.Width name to pick columns and subset the entire data frame iris[which(iris[,&#39;Petal.Length&#39;] == max(iris[,&#39;Petal.Length&#39;])) , &#39;Petal.Width&#39;] ## [1] 2.3 How many of the irises are in this dataset belong to the species versicolor? Solution sum(iris[,&#39;Species&#39;]==&#39;versicolor&#39;) ## [1] 50 table(iris[,&#39;Species&#39;]) ## this gets us all three species ## ## setosa versicolor virginica ## 50 50 50 How many irises have petals longer than 6cm? Solution sum(iris[,&#39;Petal.Length&#39;] &gt; 6) ## [1] 9 Create a vector of species name for each iris with sepals longer than 6cm. Solution iris[,&#39;Species&#39;][iris[,&#39;Sepal.Length&#39;]&gt;6] ## [1] versicolor versicolor versicolor versicolor versicolor versicolor ## [7] versicolor versicolor versicolor versicolor versicolor versicolor ## [13] versicolor versicolor versicolor versicolor versicolor versicolor ## [19] versicolor versicolor virginica virginica virginica virginica ## [25] virginica virginica virginica virginica virginica virginica ## [31] virginica virginica virginica virginica virginica virginica ## [37] virginica virginica virginica virginica virginica virginica ## [43] virginica virginica virginica virginica virginica virginica ## [49] virginica virginica virginica virginica virginica virginica ## [55] virginica virginica virginica virginica virginica virginica ## [61] virginica ## Levels: setosa versicolor virginica iris[iris[,&#39;Sepal.Length&#39;]&gt;6, &#39;Species&#39;] ## alternatively, we can put the logical vector in the row part, and Species in the column part, to get a vector back ## [1] versicolor versicolor versicolor versicolor versicolor versicolor ## [7] versicolor versicolor versicolor versicolor versicolor versicolor ## [13] versicolor versicolor versicolor versicolor versicolor versicolor ## [19] versicolor versicolor virginica virginica virginica virginica ## [25] virginica virginica virginica virginica virginica virginica ## [31] virginica virginica virginica virginica virginica virginica ## [37] virginica virginica virginica virginica virginica virginica ## [43] virginica virginica virginica virginica virginica virginica ## [49] virginica virginica virginica virginica virginica virginica ## [55] virginica virginica virginica virginica virginica virginica ## [61] virginica ## Levels: setosa versicolor virginica How many irises have sepals shorter than 5cm, but wider than 3cm? Solution sum( iris[,&#39;Sepal.Length&#39;] &lt; 5 &amp; iris[,&#39;Sepal.Width&#39;] &gt; 3 ) ## [1] 13 How many irises have petals narrower than 0.2cm or shorter than 1.5cm? Solution sum( iris[,&#39;Petal.Width&#39;] &lt; 0.2 | iris[,&#39;Petal.Length&#39;] &lt; 1.5 ) ## [1] 26 What is the average width of setosa iris sepals that are longer than 5cm? Solution mean( iris[,&#39;Sepal.Width&#39;][iris[,&#39;Sepal.Length&#39;] &gt; 5][iris[,&#39;Species&#39;]==&#39;setosa&#39;]) ## convince yourself the second part is a logical vector that subsets iris[,&#39;Sepal.Width&#39;] ## [1] 3.22 mean( iris[iris[,&#39;Sepal.Length&#39;] &gt; 5, &#39;Sepal.Width&#39;][iris[,&#39;Species&#39;]==&#39;setosa&#39;]) ## again, we can alternatively subset using logical vectors in the row position ## [1] 3.22 What is the difference between the longest and shortest petal lengths of the species virginica? Solution max(iris[,&#39;Petal.Length&#39;][iris[,&#39;Species&#39;]==&#39;virginica&#39;]) - min(iris[,&#39;Petal.Length&#39;][iris[,&#39;Species&#39;]==&#39;virginica&#39;]) ## [1] 2.4 What proportion of flowers in the dataset have petals wider than 1cm? Solution sum(iris[,&#39;Petal.Width&#39;] &gt; 1 ) / nrow(iris) ## here, we&#39;re counting up how many are wider than 1 cm, and dividing by the total number of flowers to get a proportion ## [1] 0.62 Create a new column within your dataframe, called sepalCategory, and set all values equal to long Subset short values of this column, and set their values to short (Short sepals are those less than 5.5 cm) How many plants with short sepals are there? How many long? Solution # new column for long iris[,&#39;sepalCategory&#39;] = &#39;long&#39; ## this sets ever entry in the column equal to &#39;long&#39; # new column for short (&lt; 5.5 cm) iris[,&#39;sepalCategory&#39;][iris[,&#39;Sepal.Length&#39;]&lt;5.5] = &#39;short&#39; ## this sets only those entries that match our condition to &#39;short&#39; # how many plants with short sepals are there? How many long? table(iris[,&#39;sepalCategory&#39;]) ## ## long short ## 98 52 5.10 A few tips for coding in Rstudio # how to get help for a function; you can also write help() ?ls ## starting httpd help server ... done # executing a command from a script; instead of copy/paste into the console, we can also select the command and press &#39;Ctrl&#39;+&#39;Enter&#39; OR locate our cursor at the end of the line and press &#39;Ctrl&#39;+Enter&#39; # we can use &#39;tab&#39; to complete names, just like in Bash # &#39;Ctrl&#39;+ L cleans our Console. # we can use the &#39;up&#39; arrow on our keypad to go back to the command we&#39;ve used previously. # Don&#39;t forget to save your work! "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
